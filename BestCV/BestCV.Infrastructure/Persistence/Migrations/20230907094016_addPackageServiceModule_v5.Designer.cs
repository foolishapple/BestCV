// <auto-generated />
using System;
using BestCV.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BestCV.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(JobiContext))]
    [Migration("20230907094016_addPackageServiceModule_v5")]
    partial class addPackageServiceModule_v5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BestCV.Domain.Entities.AccountStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái tài khoản");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái");

                    b.HasKey("Id");

                    b.ToTable("AccountStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Active = true,
                            Color = "green",
                            CreatedTime = new DateTime(2023, 9, 7, 16, 40, 11, 538, DateTimeKind.Local).AddTicks(9001),
                            Name = "Active"
                        },
                        new
                        {
                            Id = 1002,
                            Active = true,
                            Color = "red",
                            CreatedTime = new DateTime(2023, 9, 7, 16, 40, 11, 538, DateTimeKind.Local).AddTicks(9082),
                            Name = "Block"
                        });
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã tài khoản admin");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đầy đủ");

                    b.Property<bool>("LockEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LockEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mật khẩu");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComment("Số điện thoại");

                    b.Property<string>("Photo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đường dẫn ảnh");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)")
                        .HasComment("Trường search không dấu");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đăng nhập");

                    b.HasKey("Id");

                    b.ToTable("AdminAccount", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1001L,
                            AccessFailedCount = 0,
                            Active = true,
                            CreatedTime = new DateTime(2023, 9, 7, 16, 40, 11, 538, DateTimeKind.Local).AddTicks(9109),
                            Email = "dion@info.vn",
                            FullName = "admin",
                            LockEnabled = false,
                            Password = "7828d7aa6efcf983b850025a6ceccad25905f5ecfa1758edbd1715d012747f2e",
                            Phone = "0123456789",
                            Photo = "/uploads/admin/default_avatar.jpg",
                            Search = "admin dion@info.vn",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccountMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("AdminAccountId")
                        .HasColumnType("bigint")
                        .HasComment("Mã Admin");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên khóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên dữ liệu bổ sung của Admin");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("AdminAccountId");

                    b.ToTable("AdminAccountMeta", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccountRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã vai trò tài khoản admin");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("AdminAccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("AdminAccountId", "RoleId")
                        .IsUnique();

                    b.ToTable("AdminAccountRole", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("Benefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Candidate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasComment("Số lần đăng nhập thất bại");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("AddressDetail")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Địa chỉ cụ thể");

                    b.Property<DateTime?>("CandidateLevelEfficiencyExpiry")
                        .HasColumnType("datetime2")
                        .HasComment("Hiệu lực của cấp độ ứng viên");

                    b.Property<int>("CandidateLevelId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateStatusId")
                        .HasColumnType("int");

                    b.Property<string>("CoverPhoto")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Ảnh bìa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày sinh");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Địa chỉ email");

                    b.Property<string>("FacebookId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã fb");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Họ");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đầy đủ");

                    b.Property<int>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3))")
                        .HasComment("Giới tính");

                    b.Property<string>("GoogleId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã google");

                    b.Property<string>("Info")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Thông tin");

                    b.Property<string>("Interests")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Sở thích");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasComment("Đã xác thực chưa");

                    b.Property<bool>("IsCheckJobOffers")
                        .HasColumnType("bit")
                        .HasComment("Kiểm tra lời mời làm việc");

                    b.Property<bool>("IsCheckOnJobWatting")
                        .HasColumnType("bit")
                        .HasComment("Kiểm tra công việc đang chờ");

                    b.Property<bool>("IsCheckTopCVReview")
                        .HasColumnType("bit")
                        .HasComment("Kiểm tra đánh giá TopCV");

                    b.Property<bool>("IsCheckViewCV")
                        .HasColumnType("bit")
                        .HasComment("Kiểm tra xem sơ yếu lí lịch");

                    b.Property<bool>("IsSubcribeEmailEmployerInviteJob")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email về nhà tuyển dụng mời làm việc");

                    b.Property<bool>("IsSubcribeEmailEmployerViewCV")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo email về nhà tuyển dụng đã xem sơ yếu lí lịch ");

                    b.Property<bool>("IsSubcribeEmailGiftCoupon")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email về gift phiếu giảm giá");

                    b.Property<bool>("IsSubcribeEmailImportantSystemUpdate")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo quan trọng về cập nhật hệ thông");

                    b.Property<bool>("IsSubcribeEmailJobSuggestion")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email về gợi ý công việc");

                    b.Property<bool>("IsSubcribeEmailNewFeatureUpdate")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo email về cập nhật tính năng mới");

                    b.Property<bool>("IsSubcribeEmailOtherSystemNotification")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email về hệ thống khác");

                    b.Property<bool>("IsSubcribeEmailProgramEventIntro")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email về chương trình sự kiện giới thiệu");

                    b.Property<bool>("IsSubcribeEmailServiceIntro")
                        .HasColumnType("bit")
                        .HasComment("Nhận thông báo qua email giới thiệu về dịch vụ");

                    b.Property<string>("JobPosition")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Vị trí công việc");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.Property<string>("LinkedinId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã linked");

                    b.Property<bool>("LockEnabled")
                        .HasColumnType("bit")
                        .HasComment("Bị khoá tài khoản?");

                    b.Property<DateTime?>("LockEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Bị khóa đến thời gian nào");

                    b.Property<string>("MaritalStatus")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tình trạng hôn nhân");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đệm");

                    b.Property<string>("Nationality")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Quốc tịch");

                    b.Property<string>("Objective")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mục tiêu");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mật khẩu đăng nhập");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Số điện thoại");

                    b.Property<string>("Photo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Ảnh đại diện");

                    b.Property<string>("References")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Người tham khảo");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Lưu ký tự không dấu của các trường muốn tìm kiếm");

                    b.Property<int>("SuggestionExperienceRangeId")
                        .HasColumnType("int")
                        .HasComment("Kinh nghiệm làm việc");

                    b.Property<int>("SuggestionSalaryRangeId")
                        .HasColumnType("int")
                        .HasComment("Mức lương");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đăng nhập");

                    b.HasKey("Id");

                    b.HasIndex("CandidateLevelId");

                    b.HasIndex("CandidateStatusId");

                    b.ToTable("Candidate", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateActivities", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã hoạt động ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tên hoạt động ứng viên");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mô tả");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateActivities", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên ứng tuyển việc làm");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CandidateApplyJobSourceId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateApplyJobStatusId")
                        .HasColumnType("int");

                    b.Property<long>("CandidateCVPDFId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<bool>("IsEmployerViewed")
                        .HasColumnType("bit")
                        .HasComment("Nhà tuyển dụng đã xem");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateApplyJobSourceId");

                    b.HasIndex("CandidateApplyJobStatusId");

                    b.HasIndex("CandidateCVPDFId");

                    b.HasIndex("JobId");

                    b.ToTable("CandidateApplyJob", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJobSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã ứng viên ứng tuyền việc làm");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên ứng viên ứng tuyển việc làm");

                    b.HasKey("Id");

                    b.ToTable("CandidateApplyJobSource", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã tình trạng ứng viên ứng tuyển công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasComment("Màu");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên tình trạng ứng viên ứng tuyển công việc");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("CandidateApplyJobStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCertificate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã chứng chỉ ứng viên ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("IssueBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Cấp bởi");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tên chứng chỉ ứng viên");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Khoảng thời gian");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateCertificate", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCoupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("Mã phiếu giảm giá");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CouponId");

                    b.ToTable("CandidateCoupon", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCV", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã trạng thái template");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CVTemplateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã template");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nội dung HTML của CV");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái CV");

                    b.HasKey("Id");

                    b.HasIndex("CVTemplateId");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateCV", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCVPDF", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã trạng thái template");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CandidateCVPDFTypeId")
                        .HasColumnType("int");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã CV");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Đường dẫn của file CV PDF trên Server");

                    b.HasKey("Id");

                    b.HasIndex("CandidateCVPDFTypeId");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateCVPDF", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCVPDFType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại CV PDF của ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tên loại CV PDF");

                    b.HasKey("Id");

                    b.ToTable("CandidateCVPDFTypes", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateEducation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã học vấn ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("School")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Trường học");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Khoảng thời gian");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tiêu đề");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateEducation", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateFollowCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên theo dỗi công ty");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CandidateFollowCompany", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateHonorAndAward", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã vinh danh và giải thưởng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tên vinh danh và giải thưởng");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Khoảng thời gian");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateHonorAndAward", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateIgnoreJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã công việc ứng viên bỏ qua");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("CandidateIgnoreJob", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<DateTime?>("DiscountEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời gian của mã giảm giá");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Mã giảm giá");

                    b.Property<int>("ExpiryTime")
                        .HasColumnType("int")
                        .HasComment("Thời gian trước khi hết hạn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên cấp ứng viên");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá");

                    b.HasKey("Id");

                    b.ToTable("CandidateLevel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Active = true,
                            CreatedTime = new DateTime(2023, 9, 7, 16, 40, 11, 538, DateTimeKind.Local).AddTicks(9150),
                            DiscountPrice = 0,
                            ExpiryTime = 0,
                            Name = "Thường",
                            Price = 0
                        });
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevelBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã mức độ lợi ích của ứng viên ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên mức độ lợi ích của ứng viên");

                    b.HasKey("Id");

                    b.ToTable("CandidateLevelBenefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevelCandidateLevelBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã thư mục");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CandidateLevelBenefitId")
                        .HasColumnType("int");

                    b.Property<int>("CandidateLevelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasBenefit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Quyền lợi được hưởng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("CandidateLevelBenefitId");

                    b.HasIndex("CandidateLevelId");

                    b.ToTable("CandidateLevelCandidateLevelBenefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateMeta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã Meta ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("key");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên Meta");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("giá trị");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateMeta", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long?>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Liên kết ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên thông báo cho ứng viên");

                    b.Property<int>("NotificationStatusId")
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái thông báo ");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại thông báo");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Lưu ký tự không dấu của các trường muốn tìm kiếm");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("NotificationStatusId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("CandidateNotification", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrderCoupon", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateOrderId")
                        .HasColumnType("bigint")
                        .HasComment("Mã đơn hàng ứng viên");

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("Mã phiếu giảm giá");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.HasKey("Id");

                    b.HasIndex("CandidateOrderId");

                    b.HasIndex("CouponId");

                    b.ToTable("CandidateOrderCoupon", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CandidateLevelId")
                        .HasColumnType("int")
                        .HasComment("Mã cấp độ ứng viên ");

                    b.Property<long>("CandidateOrderId")
                        .HasColumnType("bigint")
                        .HasComment("Mã đơn hàng ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Giảm giá");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int")
                        .HasComment("Giá cuối");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Số lượng");

                    b.HasKey("Id");

                    b.HasIndex("CandidateLevelId");

                    b.HasIndex("CandidateOrderId");

                    b.ToTable("CandidateOrderDetail", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã đơn đặt hàng của ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("DiscountCounpon")
                        .HasColumnType("int")
                        .HasComment("Phiếu giảm Giá");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Giảm Giá");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int")
                        .HasComment("Giá niêm yết");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Thông tin giao dịch");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã giao dịch");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CandidateOrders", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidatePassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("OldPassword")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mật khẩu cũ");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidatePassword", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateProjects", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã dự án ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Customer")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Khách hàng");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Thông tin");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Chức vụ");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tên dự án");

                    b.Property<string>("Responsibilities")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Trách nhiệm");

                    b.Property<int>("TeamSize")
                        .HasColumnType("int")
                        .HasComment("Số người trong dự án");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Khoảng thời gian");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateProjects", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSaveJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã công việc ứng viên đã lưu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobId");

                    b.ToTable("CandidateSaveJob", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã kỹ năng ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SkillId")
                        .HasColumnType("int");

                    b.Property<int>("SkillLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("SkillId");

                    b.HasIndex("SkillLevelId");

                    b.ToTable("CandidateSkill", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã việc làm đề xuất cho ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobCategoryId");

                    b.ToTable("CandidateSuggestionJobCategory", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasComment("Mã vị trí công việc");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("CandidateSuggestionJobPosition", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã kỹ năng đề xuất cho ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("JobSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("JobSkillId");

                    b.ToTable("CandidateSuggestionJobSkill", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionWorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("WorkPlaceId")
                        .HasColumnType("int")
                        .HasComment("Mã nơi làm việc");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("CandidateSuggestionWorkPlace", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateViewedJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên đã xem công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateViewedJob", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateWorkExperience", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã kinh nghiệm làm việc của ứng viên");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Công ty");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tiêu đề công việc");

                    b.Property<string>("TimePeriod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Khoảng thời gian");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateWorkExperience", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã công ty");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Địa chỉ công ty");

                    b.Property<int>("CompanySizeId")
                        .HasColumnType("int")
                        .HasComment("Mã quy mô công ty");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Ảnh bìa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Địa chỉ email của công ty");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tài khoản Facebook");

                    b.Property<int>("FoundedIn")
                        .HasColumnType("int")
                        .HasComment("Năm thành lập");

                    b.Property<string>("LinkedinLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tài khoản Linkedin");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tọa độ trên bản đồ");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Logo công ty");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên công ty");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Số điện thoại của công ty");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tìm kiếm tổng");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mã số thuế");

                    b.Property<string>("TiktokLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tài khoản Tiktok");

                    b.Property<string>("TwitterLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tài khoản Twitter");

                    b.Property<string>("VideoIntro")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Link video giới thiệu");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Trang web của công ty");

                    b.Property<int>("WorkPlaceId")
                        .HasColumnType("int")
                        .HasComment("Mã nơi làm việc");

                    b.Property<string>("YoutubeLink")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tài khoản Youtube");

                    b.HasKey("Id");

                    b.HasIndex("CompanySizeId");

                    b.HasIndex("EmployerId")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Phone")
                        .IsUnique();

                    b.HasIndex("TaxCode")
                        .IsUnique();

                    b.HasIndex("Website")
                        .IsUnique();

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyFieldOfActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã lĩnh vực hoạt động của công ty");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("FieldOfActivityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FieldOfActivityId");

                    b.ToTable("CompanyFieldOfActivity", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasComment("Mã công ty ");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả ");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên ");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int")
                        .HasComment("Sắp xếp");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đường dẫn ảnh");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyImage", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyReview", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã đánh giá công ty");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày chấp thuận đánh giá");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên đánh giá");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasComment("Mã công ty được đánh giá");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Chấp thuận đánh giá");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasComment("Điểm đánh giá");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đánh giá");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyReview", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanySize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã quy mô công ty");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên quy mô công ty");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("CompanySize", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã coupon");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mã");

                    b.Property<int>("CouponTypeId")
                        .HasColumnType("int")
                        .HasComment("Loại coupon");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("EfficiencyTime")
                        .HasColumnType("int")
                        .HasComment("Hiệu lực của mã quà tặng (theo tháng)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CouponTypeId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CouponType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại coupon");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại coupon");

                    b.HasKey("Id");

                    b.ToTable("CouponType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CVTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã trạng thái template");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("AdditionalCSS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("CSS bổ sung của Template");

                    b.Property<long>("CVTemplateStatusId")
                        .HasColumnType("bigint")
                        .HasComment("Mã trạng thái template");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Nội dung HTML của template");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái CV");

                    b.Property<string>("Photo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Ảnh Template");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Phiên bản template");

                    b.HasKey("Id");

                    b.HasIndex("CVTemplateStatusId");

                    b.ToTable("CVTemplate", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CVTemplateStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã trạng thái template");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái CV");

                    b.HasKey("Id");

                    b.ToTable("CVTemplateStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Employer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<int?>("AccessFailedCount")
                        .HasColumnType("int")
                        .HasComment("Số lần đăng nhập thất bại");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Email");

                    b.Property<DateTime?>("EmployerServicePackageEfficiencyExpiry")
                        .HasColumnType("datetime2")
                        .HasComment("Thời gian hết hạn gói dịch vụ");

                    b.Property<int>("EmployerStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1001)
                        .HasComment("Mã trạng thái nhà tuyển dụng");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đầy đủ của nhà tuyển dụng.");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasComment("Giới tính");

                    b.Property<bool>("IsActivated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Đánh dấu đã kích hoạt tài khoản");

                    b.Property<bool?>("LockEnabled")
                        .HasColumnType("bit")
                        .HasComment("Đánh dấu bị khóa");

                    b.Property<DateTime?>("LockEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời gian tài khoản được mở");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mật khẩu");

                    b.Property<string>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Số điện thoại");

                    b.Property<string>("Photo")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Ảnh đại diện");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasComment("Mã chức vụ nhà tuyển dụng");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tìm kiếm tổng");

                    b.Property<string>("SkypeAccount")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Tài khoản Skype");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên tài khoản");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployerStatusId");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasFilter("[Phone] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.HasIndex("SkypeAccount")
                        .IsUnique()
                        .HasFilter("[SkypeAccount] IS NOT NULL");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Employer", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã lịch sử hoạt động của nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Browser")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Trình duyệt");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<int>("EmployerActivityLogTypeId")
                        .HasColumnType("int");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Địa chỉ IP");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Giá trị mới");

                    b.Property<string>("OS")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Hệ điều hành");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Giá trị cũ");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giao thức người dùng");

                    b.HasKey("Id");

                    b.HasIndex("EmployerActivityLogTypeId");

                    b.ToTable("EmployerActivityLog", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerActivityLogType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại lịch sử hoạt động của nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại lịch sử hoạt động của nhà tuyển dụng");

                    b.HasKey("Id");

                    b.ToTable("EmployerActivityLogType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã lợi ích của nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên lợi ích cho nhà tuyển dụng");

                    b.HasKey("Id");

                    b.ToTable("EmployerBenefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerMeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên khóa");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên dữ liệu bổ sung của nhà tuyển dụng");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerMeta", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long?>("EmployerId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đường dẫn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên thông báo");

                    b.Property<int>("NotificationStatusId")
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái thông báo");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại thông báo");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("NotificationStatusId");

                    b.HasIndex("NotificationTypeId");

                    b.ToTable("EmployerNotification", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Giá khuyến mãi");

                    b.Property<int>("DiscountVoucher")
                        .HasColumnType("int")
                        .HasComment("Phiếu giảm giá");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int")
                        .HasComment("Giá cuối");

                    b.Property<string>("Info")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Thông tin giao dịch");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái đơn hàng");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasComment("Mã loại thanh toán");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá tiền");

                    b.Property<string>("RequestId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã yêu cầu");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Search tổng");

                    b.Property<string>("TransactionCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã giao dịch");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("EmployerOrders", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Giảm giá");

                    b.Property<int>("EmployerServicePackageId")
                        .HasColumnType("int")
                        .HasComment("Mã gói dịch vụ nhà tuyển dụng");

                    b.Property<int>("FinalPrice")
                        .HasColumnType("int")
                        .HasComment("Giá tiền thanh toán");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasComment("Mã đơn hàng");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá tiền");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Số lượng");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Search tổng");

                    b.HasKey("Id");

                    b.HasIndex("EmployerServicePackageId");

                    b.HasIndex("OrderId");

                    b.ToTable("EmployerOrderDetail", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrderVoucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("EmployerOrderId")
                        .HasColumnType("bigint")
                        .HasComment("Mã đơn hàng nhà tuyển dụng");

                    b.Property<long>("VoucherId")
                        .HasColumnType("bigint")
                        .HasComment("Mã khuyến mãi");

                    b.HasKey("Id");

                    b.HasIndex("EmployerOrderId");

                    b.HasIndex("VoucherId");

                    b.ToTable("EmployerOrderVoucher", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã mật khẩu của nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<string>("OldPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerPassword", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerServicePackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã gói dịch vụ cho nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<DateTime?>("DiscountEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày kết thúc mã giảm giá");

                    b.Property<int>("DiscountPrice")
                        .HasColumnType("int")
                        .HasComment("Giảm giá");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên gói lợi ích cho nhà tuyển dụng");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("Giá");

                    b.Property<int>("ServicePackageGroupId")
                        .HasColumnType("int");

                    b.Property<int>("ServicePackageTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServicePackageGroupId");

                    b.ToTable("EmployerServicePackage", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerServicePackageEmployerBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã quyền lợi gói dịch vụ cho nhà tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("EmployerBenefitId")
                        .HasColumnType("int");

                    b.Property<int>("EmployerServicePackageId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBenefit")
                        .HasColumnType("bit")
                        .HasComment("Có quyền lợi hay không");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("EmployerBenefitId");

                    b.HasIndex("EmployerServicePackageId");

                    b.ToTable("EmployerServicePackageEmployerBenefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerViewedCV", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateId")
                        .HasColumnType("bigint")
                        .HasComment("Mã ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("EmployerId");

                    b.ToTable("EmployerViewedCV", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerVoucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng");

                    b.Property<int>("VoucherId")
                        .HasColumnType("int")
                        .HasComment("Mã voucher");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("VoucherId");

                    b.ToTable("EmployerVoucher", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerWallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("EmployerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasComment("Số dư");

                    b.Property<int>("WalletTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletTypeId");

                    b.HasIndex("EmployerId", "WalletTypeId")
                        .IsUnique();

                    b.ToTable("EmployerWallet", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ExperienceRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã phạm vi kinh nghiệm");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên phạm vi kinh nghiệm");

                    b.HasKey("Id");

                    b.ToTable("ExperienceRange", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.FieldOfActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã lĩnh vực hoạt động");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên lĩnh vực hoạt động");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FieldOfActivity", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.FolderUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã thư mục");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasComment("Mã thư mục cha");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Đường dẫn");

                    b.Property<string>("TreeIds")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Để truy cập và quản lý các nút trong cây thư mục");

                    b.HasKey("Id");

                    b.ToTable("FolderUpload", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã lịch phỏng vấn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("CandidateApplyJobId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày kết thúc");

                    b.Property<int>("InterviewscheduleStatusId")
                        .HasColumnType("int");

                    b.Property<int>("InterviewscheduleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Liên kết lịch phỏng vấn");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Vị trí");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StateDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày bắt đầu");

                    b.HasKey("Id");

                    b.HasIndex("CandidateApplyJobId");

                    b.HasIndex("InterviewscheduleStatusId");

                    b.HasIndex("InterviewscheduleTypeId");

                    b.ToTable("InterviewSchedule", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái phỏng vấn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu trạng thái phỏng vấn");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái phỏng vấn");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("InterviewStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại phỏng vấn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại phỏng vấn");

                    b.HasKey("Id");

                    b.ToTable("InterviewType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime?>("ApplyEndDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời hạn ứng tuyển");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời diểm duyệt tin");

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Quyền lợi công việc");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("Currency")
                        .HasColumnType("int")
                        .HasComment("Loại tiền tệ");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceRangeId")
                        .HasColumnType("int")
                        .HasComment("Mã khoảng kinh nghiệm");

                    b.Property<int>("GenderRequirement")
                        .HasColumnType("int")
                        .HasComment("Giới tính yêu cầu");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Tin tuyển dụng có được duyệt hay không");

                    b.Property<int>("JobCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("JobStatusId")
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái tin tuyển dụng");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại tin tuyển dụng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Title tin tuyển dụng");

                    b.Property<string>("Overview")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Tổng quan công việc");

                    b.Property<int>("PrimaryJobPositionId")
                        .HasColumnType("int")
                        .HasComment("Mã vị trí tuyển dụng chính");

                    b.Property<string>("ReceiverEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên người nhận");

                    b.Property<string>("ReceiverPhone")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Điện thoại người nhận");

                    b.Property<long>("RecruimentCampaignId")
                        .HasColumnType("bigint")
                        .HasComment("Mã chiến dịch tuyển dụng");

                    b.Property<string>("Requirement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Yêu cầu công việc");

                    b.Property<int?>("SalaryFrom")
                        .HasColumnType("int")
                        .HasComment("Lương tối thiểu");

                    b.Property<int?>("SalaryTo")
                        .HasColumnType("int")
                        .HasComment("Lương tối đa");

                    b.Property<int>("SalaryTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại lương");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Trường tìm kiếm");

                    b.Property<int>("TotalRecruitment")
                        .HasColumnType("int")
                        .HasComment("Số lượng cần tuyển");

                    b.HasKey("Id");

                    b.HasIndex("ExperienceRangeId");

                    b.HasIndex("JobCategoryId");

                    b.HasIndex("JobStatusId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("PrimaryJobPositionId");

                    b.HasIndex("RecruimentCampaignId");

                    b.HasIndex("SalaryTypeId");

                    b.ToTable("Job", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobAggreable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobAggreable", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã danh mục công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("")
                        .HasComment("Icon của danh mục công việc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên danh mục công việc");

                    b.HasKey("Id");

                    b.ToTable("JobCategory", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobMultimedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<int>("MultimediaTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại tệp tin đa phương tiện");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("MultimediaTypeId");

                    b.ToTable("JobMultimedia", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã vị trí công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên vị trí công việc");

                    b.HasKey("Id");

                    b.ToTable("JobPosition", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobReasonApply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Chi tiết lý do nên ứng tuyển");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Lý do nên ứng tuyển");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("JobReasonApply", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobReference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("JobReference", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireCity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CityId")
                        .HasColumnType("int")
                        .HasComment("Mã thành phố");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("JobId");

                    b.ToTable("JobRequireCity", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireDistrict", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("AddressDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Địa chỉ chi tiết");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("DistrictId")
                        .HasColumnType("int")
                        .HasComment("Mã quận/huyện");

                    b.Property<long>("JobRequireCityId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tỉnh/thành phố");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobRequireCityId");

                    b.ToTable("JobRequireDistrict", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireJobSkill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<int>("JobSkillId")
                        .HasColumnType("int")
                        .HasComment("Mã kĩ năng yêu cầu");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSkillId");

                    b.ToTable("JobRequireJobSkill", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobSecondaryJobPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasComment("Mã vị trí tuyển dụng");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobPositionId");

                    b.ToTable("JobSecondaryJobPosition", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobServicePackage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployerServicePackageId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpireTime")
                        .HasColumnType("int")
                        .HasComment("Hạn sử dụng");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Value")
                        .HasColumnType("int")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("EmployerServicePackageId");

                    b.HasIndex("JobId", "EmployerServicePackageId")
                        .IsUnique();

                    b.ToTable("JobServicePackage", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã kỹ năng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên kỹ năng");

                    b.HasKey("Id");

                    b.ToTable("JobSkill", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasComment("Màu");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái công việc");

                    b.HasKey("Id");

                    b.ToTable("JobStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tin tuyển dụng");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasComment("Mã thẻ");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("TagId");

                    b.ToTable("JobTag", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại công việc");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại công việc");

                    b.HasKey("Id");

                    b.ToTable("JobType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.License", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã giấy tờ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày chấp nhận");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Chấp nhận");

                    b.Property<int>("LicenseTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Ảnh giấy tờ");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LicenseTypeId");

                    b.ToTable("License", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.LicenseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại giấy tờ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại giấy tờ");

                    b.HasKey("Id");

                    b.ToTable("LicenseType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã menu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Icon");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Đường dẫn");

                    b.Property<int>("MenuTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasComment("Mã cấp danh mục");

                    b.Property<string>("TreeIds")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Để truy cập và quản lý các nút trong cây thư mục");

                    b.HasKey("Id");

                    b.HasIndex("MenuTypeId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MenuType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại menu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("MenuType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MultimediaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại đa phương tiện");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại đa phương tiện");

                    b.HasKey("Id");

                    b.ToTable("MultimediaType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MustBeInterestedCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("MustBeInterestedCompany", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.NotificationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái thông báo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái thông báo");

                    b.HasKey("Id");

                    b.ToTable("NotificationStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.NotificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại thông báo");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại thông báo");

                    b.HasKey("Id");

                    b.ToTable("NotificationType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Occupation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã nghề nghiệp");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên nghề nghiệp");

                    b.HasKey("Id");

                    b.ToTable("Occupation", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái đơn hàng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu trạng thái đơn hàng");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái đơn hàng");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại hóa đơn");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại hóa đơn");

                    b.HasKey("Id");

                    b.ToTable("OrderType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã phương thức thanh toán");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên phương thức thanh toán");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã quyền truy cập");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã Code");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên quyền truy cập");

                    b.HasKey("Id");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã chức vụ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên chức vụ");

                    b.HasKey("Id");

                    b.ToTable("Position", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1001,
                            Active = true,
                            CreatedTime = new DateTime(2023, 9, 7, 16, 40, 11, 538, DateTimeKind.Local).AddTicks(9184),
                            Name = "Nhân viên"
                        });
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời gian duyệt bài viết");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasComment("Mã tác giả");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasComment("Trạng thái duyệt bài viết");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublish")
                        .HasColumnType("bit")
                        .HasComment("Trạng thái xuất bản bài viết");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Tiêu đề bài viết");

                    b.Property<string>("Overview")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả ngắn");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đường dẫn ảnh bài viết");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("PostLayoutId")
                        .HasColumnType("int");

                    b.Property<int>("PostStatusId")
                        .HasColumnType("int");

                    b.Property<int>("PostTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedTime")
                        .HasColumnType("datetime2")
                        .HasComment("Thời gian xuất bản bài viết");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("varchar(MAX)")
                        .HasComment("Tìm kiếm");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostCategoryId");

                    b.HasIndex("PostLayoutId");

                    b.HasIndex("PostStatusId");

                    b.HasIndex("PostTypeId");

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã danh mục bài viết");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu danh mục bài viết");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên danh mục bài viết");

                    b.Property<int>("ParrentId")
                        .HasColumnType("int")
                        .HasComment("Mã cấp danh mục bài viết");

                    b.HasKey("Id");

                    b.ToTable("PostCategory", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostLayout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã layout bài viết");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên layout bài viết");

                    b.HasKey("Id");

                    b.ToTable("PostLayout", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái bài viết");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu trạng thái bài viết");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái bài viết");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("PostStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã thẻ bài viết");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasComment("Mã bài viết");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasComment("Mã thẻ");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.HasIndex("PostId", "TagId")
                        .IsUnique();

                    b.ToTable("PostTag", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại bài viết");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại bài viết");

                    b.HasKey("Id");

                    b.ToTable("PostType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2")
                        .HasComment("Thời điểm duyệt");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("EmployerId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasComment("Mã nhà tuyển dụng tạo chiến dịch");

                    b.Property<bool>("IsAprroved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))")
                        .HasComment("Chiến dịch tuyển dụng có được duyệt không");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên chiến dịch tuyển dụng");

                    b.Property<int>("RecruitmentCampaignStatusId")
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái chiến dịch tuyển dụng");

                    b.Property<string>("Search")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RecruitmentCampaignStatusId");

                    b.ToTable("RecruitmentCampaign", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignRequireJobPosition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("JobPositionId")
                        .HasColumnType("int")
                        .HasComment("Mã vị trí công việc");

                    b.Property<long>("RecruitmentCampaignId")
                        .HasColumnType("bigint")
                        .HasComment("Mã chiến dịch tuyển dụng");

                    b.HasKey("Id");

                    b.HasIndex("JobPositionId");

                    b.HasIndex("RecruitmentCampaignId");

                    b.ToTable("RecruitmentCampaignRequireJobPosition", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignRequireWorkPlace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("RecruitmentCampaignId")
                        .HasColumnType("bigint")
                        .HasComment("Mã chiến dịch tuyển dụng");

                    b.Property<int>("WorkPlaceId")
                        .HasColumnType("int")
                        .HasComment("Mã địa điểm làm việc");

                    b.HasKey("Id");

                    b.HasIndex("RecruitmentCampaignId");

                    b.HasIndex("WorkPlaceId");

                    b.ToTable("RecruitmentCampaignRequireWorkPlace", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã tình trạng chiến dịch tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("varchar(12)")
                        .HasComment("Màu");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên tình trạng chiến dịch tuyển dụng");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("RecruitmentCampaignStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã trạng thái chiến dịch tuyển dụng");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu trạng thái chiến dịch tuyển dụng");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên trạng thái chiến dịch tuyển dụng");

                    b.HasKey("Id");

                    b.HasIndex("Color")
                        .IsUnique();

                    b.ToTable("RecruitmentStatus", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã vai trò");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Mã");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã quyền menu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId", "MenuId")
                        .IsUnique();

                    b.ToTable("RoleMenu", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId", "PermissionId")
                        .IsUnique();

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SalaryRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã khoảng lương");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên khoảng lương");

                    b.HasKey("Id");

                    b.ToTable("SalaryRange", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SalaryType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại lương");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại lương");

                    b.HasKey("Id");

                    b.ToTable("SalaryType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageBenefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("BenefitId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<int>("EmployerServicePackageId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.HasIndex("BenefitId");

                    b.HasIndex("EmployerServicePackageId", "BenefitId")
                        .IsUnique();

                    b.ToTable("ServicePackageBenefit", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("ServicePackageGroup", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("ServicePackageType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên kỹ năng");

                    b.HasKey("Id");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SkillLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên level");

                    b.HasKey("Id");

                    b.ToTable("SkillLevel", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Slide", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã slide");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CandidateOrderSort")
                        .HasColumnType("int")
                        .HasComment("Thứ tự sắp xếp ở màn hình ứng viên");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Đường dẫn ảnh");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên slide");

                    b.Property<int>("SubOrderSort")
                        .HasColumnType("int")
                        .HasComment("Thứ tự sắp xếp phụ giữa các order sort cùng bậc");

                    b.HasKey("Id");

                    b.ToTable("Slide", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SystemConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Giá trị");

                    b.HasKey("Id");

                    b.ToTable("SystemConfig", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã thẻ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên thẻ");

                    b.Property<int>("TagTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagTypeId");

                    b.ToTable("Tag", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TagType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại thẻ");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại thẻ");

                    b.HasKey("Id");

                    b.ToTable("TagType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã công ty hàng đầu");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasComment("Mã công ty");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int")
                        .HasComment("Sắp xếp");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.ToTable("TopCompany", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopFeatureJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint")
                        .HasComment("Mã việc làm");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int")
                        .HasComment("Sắp xếp");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.ToTable("TopFeatureJob", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobExtra", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int")
                        .HasComment("Thứ tự sắp xếp");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("TopJobExtra", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobManagement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("TopJobManagement", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobUrgent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<int>("OrderSort")
                        .HasColumnType("int")
                        .HasComment("Thứ tự sắp xếp");

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("TopJobUrgent", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã file");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<long>("AdminAccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Đuôi tệp tin");

                    b.Property<int>("FolderUploadId")
                        .HasColumnType("int");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("AdminAccountId");

                    b.HasIndex("FolderUploadId");

                    b.ToTable("UploadFile", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã giảm giá");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Mã");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)")
                        .HasComment("Màu mã giảm giá");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2")
                        .HasComment("Ngày hết hạn");

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasComment("Giá trị mã giảm giá");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int")
                        .HasComment("Mã loại mã giảm giá");

                    b.HasKey("Id");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("Voucher", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.VoucherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã loại phiếu giảm giá");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên loại phiếu giảm giá");

                    b.HasKey("Id");

                    b.ToTable("VoucherType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.WalletType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Mã");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên");

                    b.HasKey("Id");

                    b.ToTable("WalletType", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.WorkPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1001L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Đánh dấu bị xóa");

                    b.Property<int>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("int")
                        .HasComment("Mã đơn vị hành chính");

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên đơn vị hành chính viết ở dạng snake_case và bỏ dấu");

                    b.Property<DateTime>("CreatedTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())")
                        .HasComment("Ngày tạo");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasComment("Mô tả ");

                    b.Property<string>("DivisionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Loại đơn vị hành chính");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasComment("Tên thành phố, quận , huyện");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasComment("Mã cha");

                    b.Property<int?>("PhoneCode")
                        .HasColumnType("int")
                        .HasComment("Mã vùng điện thoại");

                    b.Property<int?>("ProvinceCode")
                        .HasColumnType("int")
                        .HasComment("Mã tỉnh thành");

                    b.HasKey("Id");

                    b.ToTable("WorkPlace", (string)null);
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccountMeta", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.AdminAccount", "AdminAccount")
                        .WithMany("AdminAccountMetas")
                        .HasForeignKey("AdminAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminAccountMeta_AdminAccount");

                    b.Navigation("AdminAccount");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccountRole", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.AdminAccount", "AdminAccount")
                        .WithMany("AdminAccountRoles")
                        .HasForeignKey("AdminAccountId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminAccountRole_AdminAccount");

                    b.HasOne("BestCV.Domain.Entities.Role", "Role")
                        .WithMany("AdminAccountRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_AdminAccountRole_Role");

                    b.Navigation("AdminAccount");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Candidate", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateLevel", "CandidateLevels")
                        .WithMany("Candidates")
                        .HasForeignKey("CandidateLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_Candidate_CandidateLevel");

                    b.HasOne("BestCV.Domain.Entities.AccountStatus", "CandidateStatuses")
                        .WithMany("Candidates")
                        .HasForeignKey("CandidateStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Candidate_CandidateStatus");

                    b.Navigation("CandidateLevels");

                    b.Navigation("CandidateStatuses");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateActivities", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateActivities")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateActivities_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJob", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateApplyJobSource", "CandidateApplyJobSource")
                        .WithMany("CandidateApplyJobs")
                        .HasForeignKey("CandidateApplyJobSourceId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateApplyJobs_CandidateApplyJobSource");

                    b.HasOne("BestCV.Domain.Entities.CandidateApplyJobStatus", "CandidateApplyJobStatus")
                        .WithMany("CandidateApplyJobs")
                        .HasForeignKey("CandidateApplyJobStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateApplyJobs_CandidateApplyJobStatus");

                    b.HasOne("BestCV.Domain.Entities.CandidateCVPDF", "CandidateCVPDF")
                        .WithMany("CandidateApplyJobs")
                        .HasForeignKey("CandidateCVPDFId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateApplyJobs_CandidateCVPDF");

                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("CandidateApplyJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateApplyJobs_Job");

                    b.Navigation("CandidateApplyJobSource");

                    b.Navigation("CandidateApplyJobStatus");

                    b.Navigation("CandidateCVPDF");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCertificate", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateCertificates")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCertificate_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCoupon", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateCoupons")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCoupon_Candidate");

                    b.HasOne("BestCV.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CandidateCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCoupon_Coupon");

                    b.Navigation("Candidate");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCV", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CVTemplate", "CVTemplate")
                        .WithMany("CandidateCVs")
                        .HasForeignKey("CVTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCV_CVTemplate");

                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateCVs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCV_Candidate");

                    b.Navigation("CVTemplate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCVPDF", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateCVPDFType", "CandidateCVPDFType")
                        .WithMany("CandidateCVPDFs")
                        .HasForeignKey("CandidateCVPDFTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCVPDF_CandidateCVPDFType");

                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateCVPDFs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateCVPDF_Candidate");

                    b.Navigation("Candidate");

                    b.Navigation("CandidateCVPDFType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateEducation", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateEducations")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("Fk_CandidateEducation_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateFollowCompany", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateFollowCompanies")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateFollowCompany_Candidate");

                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithMany("CandidateFollowCompanies")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateFollowCompany_Company");

                    b.Navigation("Candidate");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateHonorAndAward", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateHonorAndAwards")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateHonorAndAward_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateIgnoreJob", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateIgnoreJobs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateIgnoreJob_Candidate");

                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("CandidateIgnoreJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateIgnoreJob_Job");

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevelCandidateLevelBenefit", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateLevelBenefit", "CandidateLevelBenefits")
                        .WithMany("CandidateLevelCandidateLevelBenefits")
                        .HasForeignKey("CandidateLevelBenefitId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateLevelCandidateLevelBenefit_CandidateLevelBenefit");

                    b.HasOne("BestCV.Domain.Entities.CandidateLevel", "CandidateLevels")
                        .WithMany("CandidateLevelCandidateLevelBenefits")
                        .HasForeignKey("CandidateLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateLevelCandidateLevelBenefit_CandidateLevel");

                    b.Navigation("CandidateLevelBenefits");

                    b.Navigation("CandidateLevels");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateMeta", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateMetas")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateMeta_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateNotification", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateNotifications")
                        .HasForeignKey("CandidateId")
                        .HasConstraintName("FK_CandidateNotification_Candidate");

                    b.HasOne("BestCV.Domain.Entities.NotificationStatus", "NotificationStatus")
                        .WithMany("CandidateNotifications")
                        .HasForeignKey("NotificationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateNotification_NotificationStatus");

                    b.HasOne("BestCV.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany("CandidateNotifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateNotification_NotificationType");

                    b.Navigation("Candidate");

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrderCoupon", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateOrders", "CandidateOrders")
                        .WithMany("CandidateOrderCoupons")
                        .HasForeignKey("CandidateOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrderCoupon_CandidateOrders");

                    b.HasOne("BestCV.Domain.Entities.Coupon", "Coupon")
                        .WithMany("CandidateOrderCoupons")
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrderCoupon_Coupon");

                    b.Navigation("CandidateOrders");

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrderDetail", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateLevel", "CandidateLevel")
                        .WithMany("CandidateOrderDetails")
                        .HasForeignKey("CandidateLevelId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrderDetails_CandidateLevel");

                    b.HasOne("BestCV.Domain.Entities.CandidateOrders", "CandidateOrders")
                        .WithMany("CandidateOrderDetails")
                        .HasForeignKey("CandidateOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrderDetails_CandidateOrders");

                    b.Navigation("CandidateLevel");

                    b.Navigation("CandidateOrders");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrders", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateOrderses")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrders_Candidate");

                    b.HasOne("BestCV.Domain.Entities.OrderStatus", "OrderStatus")
                        .WithMany("CandidateOrderses")
                        .HasForeignKey("OrderStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrders_OrderStatus");

                    b.HasOne("BestCV.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("CandidateOrderses")
                        .HasForeignKey("PaymentMethodId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateOrders_PaymentMethod");

                    b.Navigation("Candidate");

                    b.Navigation("OrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidatePassword", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidatePasswords")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidatePassword_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateProjects", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateProjectses")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateProjects_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSaveJob", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSaveJobs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSaveJob_Candidate");

                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("CandidateSaveJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSaveJob_Job");

                    b.Navigation("Candidate");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSkill", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("CandidateId")
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.Skill", "Skill")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSkill_Skill");

                    b.HasOne("BestCV.Domain.Entities.SkillLevel", "SkillLevel")
                        .WithMany("CandidateSkills")
                        .HasForeignKey("SkillLevelId")
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Skill");

                    b.Navigation("SkillLevel");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobCategory", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSuggestionJobCategories")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobCategory_Candidate");

                    b.HasOne("BestCV.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("CandidateSuggestionJobCategories")
                        .HasForeignKey("JobCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobCategory_JobCategory");

                    b.Navigation("Candidate");

                    b.Navigation("JobCategory");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobPosition", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSuggestionJobPositions")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobPosition_Candidate");

                    b.HasOne("BestCV.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("CandidateSuggestionJobPositions")
                        .HasForeignKey("JobPositionId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobPosition_JobPosition");

                    b.Navigation("Candidate");

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionJobSkill", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSuggestionJobSkills")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobSkill_Candidate");

                    b.HasOne("BestCV.Domain.Entities.JobSkill", "JobSkill")
                        .WithMany("CandidateSuggestionJobSkills")
                        .HasForeignKey("JobSkillId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionJobSkill_JobSkill");

                    b.Navigation("Candidate");

                    b.Navigation("JobSkill");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateSuggestionWorkPlace", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateSuggestionWorkPlaces")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionWorkPlace_Candidate");

                    b.HasOne("BestCV.Domain.Entities.WorkPlace", "WorkPlace")
                        .WithMany("CandidateSuggestionWorkPlaces")
                        .HasForeignKey("WorkPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateSuggestionWorkPlace_WorkPlace");

                    b.Navigation("Candidate");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateViewedJob", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateViewedJobs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CandidateViewedJob_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateWorkExperience", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CandidateWorkExperiences")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("CandidateWorkExperience_Candidate");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Company", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CompanySize", "CompanySize")
                        .WithMany("Companies")
                        .HasForeignKey("CompanySizeId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanySize");

                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithOne("Company")
                        .HasForeignKey("BestCV.Domain.Entities.Company", "EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_Employer");

                    b.HasOne("BestCV.Domain.Entities.WorkPlace", "WorkPlace")
                        .WithMany("Companies")
                        .HasForeignKey("WorkPlaceId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_WorkPlace");

                    b.Navigation("CompanySize");

                    b.Navigation("Employer");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyFieldOfActivity", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithMany("CompanyFieldOfActivities")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFieldOfActivity_Company");

                    b.HasOne("BestCV.Domain.Entities.FieldOfActivity", "FieldOfActivity")
                        .WithMany("CompanyFieldOfActivities")
                        .HasForeignKey("FieldOfActivityId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFieldOfActivity_FieldOfActivity");

                    b.Navigation("Company");

                    b.Navigation("FieldOfActivity");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyImage", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithMany("CompanyImages")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyImage_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanyReview", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("CompanyReviews")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyReview_Candidate");

                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithMany("CompanyReview")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyReview_Company");

                    b.Navigation("Candidate");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Coupon", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CouponType", "CouponType")
                        .WithMany("Coupon")
                        .HasForeignKey("CouponTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CouponType_Coupon");

                    b.Navigation("CouponType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CVTemplate", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CVTemplateStatus", "CVTemplateStatus")
                        .WithMany("CVTemplates")
                        .HasForeignKey("CVTemplateStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_CVTemplate_CVTemplateStatus");

                    b.Navigation("CVTemplateStatus");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Employer", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.AccountStatus", "EmployerStatus")
                        .WithMany("Employers")
                        .HasForeignKey("EmployerStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Employer_EmployerStatus");

                    b.HasOne("BestCV.Domain.Entities.Position", "Position")
                        .WithMany("Employers")
                        .HasForeignKey("PositionId")
                        .IsRequired()
                        .HasConstraintName("FK_Employer_Position");

                    b.Navigation("EmployerStatus");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerActivityLog", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.EmployerActivityLogType", "EmployerActivityLogType")
                        .WithMany("EmployerActivityLogs")
                        .HasForeignKey("EmployerActivityLogTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerActivityLog_EmployerActivityLogType");

                    b.Navigation("EmployerActivityLogType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerMeta", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerMetas")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerMeta_Employer");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerNotification", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerNotifications")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_Employer_EmployerNotification");

                    b.HasOne("BestCV.Domain.Entities.NotificationStatus", "NotificationStatus")
                        .WithMany("EmployerNotifications")
                        .HasForeignKey("NotificationStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationStatus_EmployerNotification");

                    b.HasOne("BestCV.Domain.Entities.NotificationType", "NotificationType")
                        .WithMany("EmployerNotifications")
                        .HasForeignKey("NotificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_NotificationType_EmployerNotification");

                    b.Navigation("Employer");

                    b.Navigation("NotificationStatus");

                    b.Navigation("NotificationType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrder", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerOrders")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.OrderStatus", "EmployerOrderStatus")
                        .WithMany("EmployerOrders")
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("EmployerOrders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("EmployerOrderStatus");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrderDetail", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.EmployerServicePackage", "EmployerServicePackage")
                        .WithMany("EmployerOrderDetails")
                        .HasForeignKey("EmployerServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerServicePackage_EmployerOrderDetail");

                    b.HasOne("BestCV.Domain.Entities.EmployerOrder", "EmployerOrder")
                        .WithMany("EmployerOrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerOrder_EmployerOrderDetail");

                    b.Navigation("EmployerOrder");

                    b.Navigation("EmployerServicePackage");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrderVoucher", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.EmployerOrder", "EmployerOrder")
                        .WithMany("EmployerOrderVouchers")
                        .HasForeignKey("EmployerOrderId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerOrder_EmployerOrderVoucher");

                    b.HasOne("BestCV.Domain.Entities.EmployerVoucher", "EmployerVoucher")
                        .WithMany("EmployerOrderVouchers")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerVoucher_EmployerOrderVoucher");

                    b.Navigation("EmployerOrder");

                    b.Navigation("EmployerVoucher");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerPassword", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerPasswords")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerPassword_Employer");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerServicePackage", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.ServicePackageGroup", "ServicePackageGroup")
                        .WithMany("EmployerServicePackages")
                        .HasForeignKey("ServicePackageGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerServicePackage_ServicePackageGroup");

                    b.HasOne("BestCV.Domain.Entities.ServicePackageType", "ServicePackageType")
                        .WithMany("EmployerServicePackages")
                        .HasForeignKey("ServicePackageGroupId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerServicePackage_ServicePackageType");

                    b.Navigation("ServicePackageGroup");

                    b.Navigation("ServicePackageType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerServicePackageEmployerBenefit", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.EmployerBenefit", "EmployerBenefit")
                        .WithMany("EmployerServicePackageEmployerBenefits")
                        .HasForeignKey("EmployerBenefitId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerBenefit_EmployerServicePackageEmployerBenefit");

                    b.HasOne("BestCV.Domain.Entities.EmployerServicePackage", "EmployerServicePackage")
                        .WithMany("EmployerServicePackageEmployerBenefits")
                        .HasForeignKey("EmployerServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerServicePackage_EmployerServicePackageEmployerBenefit");

                    b.Navigation("EmployerBenefit");

                    b.Navigation("EmployerServicePackage");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerViewedCV", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Candidate", "Candidate")
                        .WithMany("EmployerViewedCVs")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_Candidate_EmployerViewedCV");

                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerViewedCVs")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_Employer_EmployerViewedCV");

                    b.Navigation("Candidate");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerVoucher", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerVouchers")
                        .HasForeignKey("EmployerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.Voucher", "Voucher")
                        .WithMany("EmployerVouchers")
                        .HasForeignKey("VoucherId")
                        .IsRequired()
                        .HasConstraintName("FK_Voucher_EmployerVoucher");

                    b.Navigation("Employer");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerWallet", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("EmployerWallets")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerWallet_Employer");

                    b.HasOne("BestCV.Domain.Entities.WalletType", "WalletType")
                        .WithMany("EmployerWallets")
                        .HasForeignKey("WalletTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployerWallet_WalletType");

                    b.Navigation("Employer");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewSchedule", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.CandidateApplyJob", "CandidateApplyJob")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("CandidateApplyJobId")
                        .IsRequired()
                        .HasConstraintName("FK_InterviewSchedule_CandidateApplyJob");

                    b.HasOne("BestCV.Domain.Entities.InterviewStatus", "InterviewStatus")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("InterviewscheduleStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_InterviewSchedule_InterviewStatus");

                    b.HasOne("BestCV.Domain.Entities.InterviewType", "InterviewType")
                        .WithMany("InterviewSchedules")
                        .HasForeignKey("InterviewscheduleTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_InterviewSchedule_InterviewType");

                    b.Navigation("CandidateApplyJob");

                    b.Navigation("InterviewStatus");

                    b.Navigation("InterviewType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Job", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.ExperienceRange", "ExperienceRange")
                        .WithMany("Jobs")
                        .HasForeignKey("ExperienceRangeId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_ExperienceRange");

                    b.HasOne("BestCV.Domain.Entities.JobCategory", "JobCategory")
                        .WithMany("Jobs")
                        .HasForeignKey("JobCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_JobCategory");

                    b.HasOne("BestCV.Domain.Entities.JobStatus", "JobStatus")
                        .WithMany("Jobs")
                        .HasForeignKey("JobStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_JobStatus");

                    b.HasOne("BestCV.Domain.Entities.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_JobType");

                    b.HasOne("BestCV.Domain.Entities.JobPosition", "PrimaryJobPosition")
                        .WithMany("Jobs")
                        .HasForeignKey("PrimaryJobPositionId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_PrimaryJobPosition");

                    b.HasOne("BestCV.Domain.Entities.RecruitmentCampaign", "RecruitmentCampaign")
                        .WithMany("Jobs")
                        .HasForeignKey("RecruimentCampaignId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_RecruitmentCampaign");

                    b.HasOne("BestCV.Domain.Entities.SalaryType", "SalaryType")
                        .WithMany("Jobs")
                        .HasForeignKey("SalaryTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Job_SalaryType");

                    b.Navigation("ExperienceRange");

                    b.Navigation("JobCategory");

                    b.Navigation("JobStatus");

                    b.Navigation("JobType");

                    b.Navigation("PrimaryJobPosition");

                    b.Navigation("RecruitmentCampaign");

                    b.Navigation("SalaryType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobAggreable", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobAggreables")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobAggreable_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobMultimedia", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobMultimedias")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobMultimedia_Job");

                    b.HasOne("BestCV.Domain.Entities.MultimediaType", "MultimediaType")
                        .WithMany("JobMultimedias")
                        .HasForeignKey("MultimediaTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_JobMultimedia_MultimediaType");

                    b.Navigation("Job");

                    b.Navigation("MultimediaType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobReasonApply", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobReasonApplies")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobReasonApply_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobReference", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobReferences")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobReference_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireCity", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.WorkPlace", "WorkPlace")
                        .WithMany("JobRequireCities")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRequireCity_WorkPlace");

                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobRequireCities")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRequireCity_Job");

                    b.Navigation("Job");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireDistrict", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.JobRequireCity", "JobRequireCity")
                        .WithMany("JobRequireDistricts")
                        .HasForeignKey("JobRequireCityId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRequireDistrict_JobRequireCity");

                    b.Navigation("JobRequireCity");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireJobSkill", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobRequireJobSkills")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRequireJobSkill_Job");

                    b.HasOne("BestCV.Domain.Entities.JobSkill", "JobSkill")
                        .WithMany("JobRequireJobSkills")
                        .HasForeignKey("JobSkillId")
                        .IsRequired()
                        .HasConstraintName("FK_JobRequireJobSkill_JobSkill");

                    b.Navigation("Job");

                    b.Navigation("JobSkill");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobSecondaryJobPosition", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobSecondaryJobPositions")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobSecondaryJobPosition_Job");

                    b.HasOne("BestCV.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("JobSecondaryJobPositions")
                        .HasForeignKey("JobPositionId")
                        .IsRequired()
                        .HasConstraintName("FK_JobSecondaryJobPosition_JobPosition");

                    b.Navigation("Job");

                    b.Navigation("JobPosition");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobServicePackage", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.EmployerServicePackage", "EmployerServicePackage")
                        .WithMany("JobServicePackages")
                        .HasForeignKey("EmployerServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK_JobServicePackage_EmployerServicePackage");

                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobServicePackages")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobServicePackage_Job");

                    b.Navigation("EmployerServicePackage");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobTag", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("JobTags")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_JobTag_Job");

                    b.HasOne("BestCV.Domain.Entities.Tag", "Tag")
                        .WithMany("JobTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_JobTag_Tag");

                    b.Navigation("Job");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.License", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithMany("Licenses")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_License_Company");

                    b.HasOne("BestCV.Domain.Entities.LicenseType", "LicenseType")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_License_LicenseType");

                    b.Navigation("Company");

                    b.Navigation("LicenseType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Menu", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.MenuType", "MenuType")
                        .WithMany("Menus")
                        .HasForeignKey("MenuTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Menu_MenuType");

                    b.Navigation("MenuType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MustBeInterestedCompany", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("MustBeInterestedCompanies")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_MustBeInterestedCompany_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Post", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.AdminAccount", "AdminAccount")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_AdminAccount");

                    b.HasOne("BestCV.Domain.Entities.PostCategory", "PostCategory")
                        .WithMany("Posts")
                        .HasForeignKey("PostCategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_PostCategory");

                    b.HasOne("BestCV.Domain.Entities.PostLayout", "PostLayout")
                        .WithMany("Posts")
                        .HasForeignKey("PostLayoutId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_PostLayout");

                    b.HasOne("BestCV.Domain.Entities.PostStatus", "PostStatus")
                        .WithMany("Posts")
                        .HasForeignKey("PostStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_PostStatus");

                    b.HasOne("BestCV.Domain.Entities.PostType", "PostType")
                        .WithMany("Posts")
                        .HasForeignKey("PostTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Post_PostType");

                    b.Navigation("AdminAccount");

                    b.Navigation("PostCategory");

                    b.Navigation("PostLayout");

                    b.Navigation("PostStatus");

                    b.Navigation("PostType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostTag", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Post", "Post")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .IsRequired()
                        .HasConstraintName("FK_PostTag_Post");

                    b.HasOne("BestCV.Domain.Entities.Tag", "Tag")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("FK_PostTag_Tag");

                    b.Navigation("Post");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaign", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Employer", "Employer")
                        .WithMany("RecruitmentCampaigns")
                        .HasForeignKey("EmployerId")
                        .IsRequired()
                        .HasConstraintName("FK_RecruitmentCampaigns_Employer");

                    b.HasOne("BestCV.Domain.Entities.RecruitmentCampaignStatus", "RecruitmentCampaignStatus")
                        .WithMany("RecruitmentCampaigns")
                        .HasForeignKey("RecruitmentCampaignStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_RecruitmentCampaign_RecruitmentCampaignStatus");

                    b.Navigation("Employer");

                    b.Navigation("RecruitmentCampaignStatus");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignRequireJobPosition", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.JobPosition", "JobPosition")
                        .WithMany("RecruitmentCampaignRequireJobPositions")
                        .HasForeignKey("JobPositionId")
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.RecruitmentCampaign", "RecruitmentCampaign")
                        .WithMany("RecruitmentCampaignRequireJobPositions")
                        .HasForeignKey("RecruitmentCampaignId")
                        .IsRequired();

                    b.Navigation("JobPosition");

                    b.Navigation("RecruitmentCampaign");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignRequireWorkPlace", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.RecruitmentCampaign", "RecruitmentCampaign")
                        .WithMany("RecruitmentCampaignRequireWorkPlaces")
                        .HasForeignKey("RecruitmentCampaignId")
                        .IsRequired();

                    b.HasOne("BestCV.Domain.Entities.WorkPlace", "WorkPlace")
                        .WithMany("CampaignRequireWorkPlaces")
                        .HasForeignKey("WorkPlaceId")
                        .IsRequired();

                    b.Navigation("RecruitmentCampaign");

                    b.Navigation("WorkPlace");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Menu", "Menu")
                        .WithMany("RoleMenus")
                        .HasForeignKey("MenuId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleMenu_Menu");

                    b.HasOne("BestCV.Domain.Entities.Role", "Role")
                        .WithMany("RoleMenus")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RoleMenu_Role");

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Permissions");

                    b.HasOne("BestCV.Domain.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_RolePermissions_Roles");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageBenefit", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Benefit", "Benefit")
                        .WithMany("ServicePackageBenefits")
                        .HasForeignKey("BenefitId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicePackageBenefit_Benefit");

                    b.HasOne("BestCV.Domain.Entities.EmployerServicePackage", "EmployerServicePackage")
                        .WithMany("ServicePackageBenefits")
                        .HasForeignKey("EmployerServicePackageId")
                        .IsRequired()
                        .HasConstraintName("FK_ServicePackageBenefit_EmployerServicePackage");

                    b.Navigation("Benefit");

                    b.Navigation("EmployerServicePackage");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Tag", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.TagType", "TagType")
                        .WithMany("Tags")
                        .HasForeignKey("TagTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Tag_TagType");

                    b.Navigation("TagType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopCompany", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Company", "Company")
                        .WithOne("TopCompany")
                        .HasForeignKey("BestCV.Domain.Entities.TopCompany", "CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_TopCompany_Company");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopFeatureJob", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("TopFeatureJobs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_TopFeatureJob_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobExtra", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("TopJobExtras")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_TopJobExtra_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobManagement", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("TopJobManagements")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_TopJobManagement_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TopJobUrgent", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.Job", "Job")
                        .WithMany("TopJobUrgents")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK_TopJobUrgent_Job");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.UploadFile", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.AdminAccount", "AdminAccount")
                        .WithMany("UploadFiles")
                        .HasForeignKey("AdminAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UploadFile_AdminAccount");

                    b.HasOne("BestCV.Domain.Entities.FolderUpload", "FolderUpload")
                        .WithMany("UploadFiles")
                        .HasForeignKey("FolderUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UploadFile_FolderUpload");

                    b.Navigation("AdminAccount");

                    b.Navigation("FolderUpload");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Voucher", b =>
                {
                    b.HasOne("BestCV.Domain.Entities.VoucherType", "VoucherType")
                        .WithMany("Vouchers")
                        .HasForeignKey("VoucherTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Voucher_VoucherType");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AccountStatus", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Employers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.AdminAccount", b =>
                {
                    b.Navigation("AdminAccountMetas");

                    b.Navigation("AdminAccountRoles");

                    b.Navigation("Posts");

                    b.Navigation("UploadFiles");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Benefit", b =>
                {
                    b.Navigation("ServicePackageBenefits");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Candidate", b =>
                {
                    b.Navigation("CandidateActivities");

                    b.Navigation("CandidateCVPDFs");

                    b.Navigation("CandidateCVs");

                    b.Navigation("CandidateCertificates");

                    b.Navigation("CandidateCoupons");

                    b.Navigation("CandidateEducations");

                    b.Navigation("CandidateFollowCompanies");

                    b.Navigation("CandidateHonorAndAwards");

                    b.Navigation("CandidateIgnoreJobs");

                    b.Navigation("CandidateMetas");

                    b.Navigation("CandidateNotifications");

                    b.Navigation("CandidateOrderses");

                    b.Navigation("CandidatePasswords");

                    b.Navigation("CandidateProjectses");

                    b.Navigation("CandidateSaveJobs");

                    b.Navigation("CandidateSkills");

                    b.Navigation("CandidateSuggestionJobCategories");

                    b.Navigation("CandidateSuggestionJobPositions");

                    b.Navigation("CandidateSuggestionJobSkills");

                    b.Navigation("CandidateSuggestionWorkPlaces");

                    b.Navigation("CandidateViewedJobs");

                    b.Navigation("CandidateWorkExperiences");

                    b.Navigation("CompanyReviews");

                    b.Navigation("EmployerViewedCVs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJob", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJobSource", b =>
                {
                    b.Navigation("CandidateApplyJobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateApplyJobStatus", b =>
                {
                    b.Navigation("CandidateApplyJobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCVPDF", b =>
                {
                    b.Navigation("CandidateApplyJobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateCVPDFType", b =>
                {
                    b.Navigation("CandidateCVPDFs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevel", b =>
                {
                    b.Navigation("CandidateLevelCandidateLevelBenefits");

                    b.Navigation("CandidateOrderDetails");

                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateLevelBenefit", b =>
                {
                    b.Navigation("CandidateLevelCandidateLevelBenefits");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CandidateOrders", b =>
                {
                    b.Navigation("CandidateOrderCoupons");

                    b.Navigation("CandidateOrderDetails");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Company", b =>
                {
                    b.Navigation("CandidateFollowCompanies");

                    b.Navigation("CompanyFieldOfActivities");

                    b.Navigation("CompanyImages");

                    b.Navigation("CompanyReview");

                    b.Navigation("Licenses");

                    b.Navigation("TopCompany")
                        .IsRequired();
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CompanySize", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Coupon", b =>
                {
                    b.Navigation("CandidateCoupons");

                    b.Navigation("CandidateOrderCoupons");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CouponType", b =>
                {
                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CVTemplate", b =>
                {
                    b.Navigation("CandidateCVs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.CVTemplateStatus", b =>
                {
                    b.Navigation("CVTemplates");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Employer", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("EmployerMetas");

                    b.Navigation("EmployerNotifications");

                    b.Navigation("EmployerOrders");

                    b.Navigation("EmployerPasswords");

                    b.Navigation("EmployerViewedCVs");

                    b.Navigation("EmployerVouchers");

                    b.Navigation("EmployerWallets");

                    b.Navigation("RecruitmentCampaigns");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerActivityLogType", b =>
                {
                    b.Navigation("EmployerActivityLogs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerBenefit", b =>
                {
                    b.Navigation("EmployerServicePackageEmployerBenefits");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerOrder", b =>
                {
                    b.Navigation("EmployerOrderDetails");

                    b.Navigation("EmployerOrderVouchers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerServicePackage", b =>
                {
                    b.Navigation("EmployerOrderDetails");

                    b.Navigation("EmployerServicePackageEmployerBenefits");

                    b.Navigation("JobServicePackages");

                    b.Navigation("ServicePackageBenefits");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.EmployerVoucher", b =>
                {
                    b.Navigation("EmployerOrderVouchers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ExperienceRange", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.FieldOfActivity", b =>
                {
                    b.Navigation("CompanyFieldOfActivities");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.FolderUpload", b =>
                {
                    b.Navigation("UploadFiles");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewStatus", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.InterviewType", b =>
                {
                    b.Navigation("InterviewSchedules");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Job", b =>
                {
                    b.Navigation("CandidateApplyJobs");

                    b.Navigation("CandidateIgnoreJobs");

                    b.Navigation("CandidateSaveJobs");

                    b.Navigation("JobAggreables");

                    b.Navigation("JobMultimedias");

                    b.Navigation("JobReasonApplies");

                    b.Navigation("JobReferences");

                    b.Navigation("JobRequireCities");

                    b.Navigation("JobRequireJobSkills");

                    b.Navigation("JobSecondaryJobPositions");

                    b.Navigation("JobServicePackages");

                    b.Navigation("JobTags");

                    b.Navigation("MustBeInterestedCompanies");

                    b.Navigation("TopFeatureJobs");

                    b.Navigation("TopJobExtras");

                    b.Navigation("TopJobManagements");

                    b.Navigation("TopJobUrgents");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobCategory", b =>
                {
                    b.Navigation("CandidateSuggestionJobCategories");

                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobPosition", b =>
                {
                    b.Navigation("CandidateSuggestionJobPositions");

                    b.Navigation("JobSecondaryJobPositions");

                    b.Navigation("Jobs");

                    b.Navigation("RecruitmentCampaignRequireJobPositions");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobRequireCity", b =>
                {
                    b.Navigation("JobRequireDistricts");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobSkill", b =>
                {
                    b.Navigation("CandidateSuggestionJobSkills");

                    b.Navigation("JobRequireJobSkills");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobStatus", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.LicenseType", b =>
                {
                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Menu", b =>
                {
                    b.Navigation("RoleMenus");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MenuType", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.MultimediaType", b =>
                {
                    b.Navigation("JobMultimedias");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.NotificationStatus", b =>
                {
                    b.Navigation("CandidateNotifications");

                    b.Navigation("EmployerNotifications");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.NotificationType", b =>
                {
                    b.Navigation("CandidateNotifications");

                    b.Navigation("EmployerNotifications");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("CandidateOrderses");

                    b.Navigation("EmployerOrders");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("CandidateOrderses");

                    b.Navigation("EmployerOrders");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Position", b =>
                {
                    b.Navigation("Employers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Post", b =>
                {
                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostLayout", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostStatus", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.PostType", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaign", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("RecruitmentCampaignRequireJobPositions");

                    b.Navigation("RecruitmentCampaignRequireWorkPlaces");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.RecruitmentCampaignStatus", b =>
                {
                    b.Navigation("RecruitmentCampaigns");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Role", b =>
                {
                    b.Navigation("AdminAccountRoles");

                    b.Navigation("RoleMenus");

                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SalaryType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageGroup", b =>
                {
                    b.Navigation("EmployerServicePackages");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.ServicePackageType", b =>
                {
                    b.Navigation("EmployerServicePackages");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Skill", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.SkillLevel", b =>
                {
                    b.Navigation("CandidateSkills");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Tag", b =>
                {
                    b.Navigation("JobTags");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.TagType", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.Voucher", b =>
                {
                    b.Navigation("EmployerVouchers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.VoucherType", b =>
                {
                    b.Navigation("Vouchers");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.WalletType", b =>
                {
                    b.Navigation("EmployerWallets");
                });

            modelBuilder.Entity("BestCV.Domain.Entities.WorkPlace", b =>
                {
                    b.Navigation("CampaignRequireWorkPlaces");

                    b.Navigation("CandidateSuggestionWorkPlaces");

                    b.Navigation("Companies");

                    b.Navigation("JobRequireCities");
                });
#pragma warning restore 612, 618
        }
    }
}
